// <auto-generated />
using System;
using Autopark.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Autopark.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231127130036_AddDriverAndEnterpriseModelsAndConnectionsBetweenExistingOnes")]
    partial class AddDriverAndEnterpriseModelsAndConnectionsBetweenExistingOnes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-rc.2.23480.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Autopark.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequiredDriverCategory")
                        .HasColumnType("int");

                    b.Property<int>("SeatsAmount")
                        .HasColumnType("int");

                    b.Property<int>("Segment")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Chery",
                            RequiredDriverCategory = 0,
                            SeatsAmount = 5,
                            Segment = 0,
                            Type = 3
                        },
                        new
                        {
                            Id = 2,
                            Name = "Kamaz",
                            RequiredDriverCategory = 4,
                            SeatsAmount = 2,
                            Segment = 2,
                            Type = 8
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ferrari",
                            RequiredDriverCategory = 0,
                            SeatsAmount = 2,
                            Segment = 1,
                            Type = 2
                        });
                });

            modelBuilder.Entity("Autopark.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EnterpriseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnterpriseId");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EnterpriseId = 1,
                            Name = "Василий",
                            Salary = 45000
                        },
                        new
                        {
                            Id = 2,
                            EnterpriseId = 2,
                            Name = "Геннадий",
                            Salary = 30000
                        },
                        new
                        {
                            Id = 3,
                            EnterpriseId = 3,
                            Name = "Евгений",
                            Salary = 50000
                        },
                        new
                        {
                            Id = 4,
                            EnterpriseId = 1,
                            Name = "Александр",
                            Salary = 55000
                        },
                        new
                        {
                            Id = 5,
                            EnterpriseId = 2,
                            Name = "Григорий",
                            Salary = 35000
                        });
                });

            modelBuilder.Entity("Autopark.Models.Enterprise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enterprises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Москва",
                            Name = "Мосгортранс"
                        },
                        new
                        {
                            Id = 2,
                            City = "Мюнхен",
                            Name = "DHL"
                        },
                        new
                        {
                            Id = 3,
                            City = "Новосибирск",
                            Name = "Сибтранс"
                        });
                });

            modelBuilder.Entity("Autopark.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<int?>("EnterpriseId")
                        .HasColumnType("int");

                    b.Property<int>("HorsePower")
                        .HasColumnType("int");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<double>("ZeroToHundred")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("DriverId")
                        .IsUnique()
                        .HasFilter("[DriverId] IS NOT NULL");

                    b.HasIndex("EnterpriseId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            DriverId = 1,
                            EnterpriseId = 1,
                            HorsePower = 5000,
                            Mileage = 2000,
                            Name = "Chery Tiggo Pro Max 8",
                            Price = 3120000.0,
                            Year = 2023,
                            ZeroToHundred = 8.5
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            EnterpriseId = 1,
                            HorsePower = 5500,
                            Mileage = 4000,
                            Name = "Chery Tiggo Pro Max 7",
                            Price = 2055000.0,
                            Year = 2022,
                            ZeroToHundred = 9.8000000000000007
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            DriverId = 2,
                            EnterpriseId = 2,
                            HorsePower = 5000,
                            Mileage = 10000,
                            Name = "Chery Tiggo Pro Max 6",
                            Price = 3120000.0,
                            Year = 2021,
                            ZeroToHundred = 8.5
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 2,
                            EnterpriseId = 2,
                            HorsePower = 2500,
                            Mileage = 14000,
                            Name = "КАМАЗ 69592",
                            Price = 3055000.0,
                            Year = 2012,
                            ZeroToHundred = 26.0
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 3,
                            DriverId = 3,
                            EnterpriseId = 3,
                            HorsePower = 10000,
                            Mileage = 0,
                            Name = "FERRARI F430",
                            Price = 130120000.0,
                            Year = 2020,
                            ZeroToHundred = 1.8
                        });
                });

            modelBuilder.Entity("DriverVehicle", b =>
                {
                    b.Property<int>("AssignedCarsId")
                        .HasColumnType("int");

                    b.Property<int>("AssignedDriversId")
                        .HasColumnType("int");

                    b.HasKey("AssignedCarsId", "AssignedDriversId");

                    b.HasIndex("AssignedDriversId");

                    b.ToTable("DriverVehicle");
                });

            modelBuilder.Entity("Autopark.Models.Driver", b =>
                {
                    b.HasOne("Autopark.Models.Enterprise", "Enterprise")
                        .WithMany("Drivers")
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("Autopark.Models.Vehicle", b =>
                {
                    b.HasOne("Autopark.Models.Brand", "Brand")
                        .WithMany("Vehicles")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Autopark.Models.Driver", "Driver")
                        .WithOne("Vehicle")
                        .HasForeignKey("Autopark.Models.Vehicle", "DriverId");

                    b.HasOne("Autopark.Models.Enterprise", "Enterprise")
                        .WithMany("Vehicles")
                        .HasForeignKey("EnterpriseId");

                    b.Navigation("Brand");

                    b.Navigation("Driver");

                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("DriverVehicle", b =>
                {
                    b.HasOne("Autopark.Models.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("AssignedCarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Autopark.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("AssignedDriversId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Autopark.Models.Brand", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Autopark.Models.Driver", b =>
                {
                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Autopark.Models.Enterprise", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
